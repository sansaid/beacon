// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProbe(params *DeleteProbeParams, opts ...ClientOption) (*DeleteProbeCreated, error)

	GetBeacon(params *GetBeaconParams, opts ...ClientOption) (*GetBeaconOK, error)

	GetHealth(params *GetHealthParams, opts ...ClientOption) (*GetHealthOK, error)

	GetProbes(params *GetProbesParams, opts ...ClientOption) (*GetProbesOK, error)

	PostProbe(params *PostProbeParams, opts ...ClientOption) (*PostProbeCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProbe deletes a probe

deletes the probe for the namespace and repo provided in the URL query parameters
*/
func (a *Client) DeleteProbe(params *DeleteProbeParams, opts ...ClientOption) (*DeleteProbeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProbeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProbe",
		Method:             "DELETE",
		PathPattern:        "/probe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProbeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProbeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProbe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBeacon gets beacon details

describes the current status of beacond
*/
func (a *Client) GetBeacon(params *GetBeaconParams, opts ...ClientOption) (*GetBeaconOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBeaconParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBeacon",
		Method:             "GET",
		PathPattern:        "/beacon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBeaconReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBeaconOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBeacon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHealth healths check

reports the health of the beacond server
*/
func (a *Client) GetHealth(params *GetHealthParams, opts ...ClientOption) (*GetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHealth",
		Method:             "GET",
		PathPattern:        "/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProbes lists all probes

lists probes that are running for beacond
*/
func (a *Client) GetProbes(params *GetProbesParams, opts ...ClientOption) (*GetProbesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProbesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProbes",
		Method:             "GET",
		PathPattern:        "/probes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProbesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProbesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProbes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProbe creates a probe

creates a probe for the namespace and repo provided in the URL query parameters
*/
func (a *Client) PostProbe(params *PostProbeParams, opts ...ClientOption) (*PostProbeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProbeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProbe",
		Method:             "POST",
		PathPattern:        "/probe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProbeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProbeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProbe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
